@page "/category"
@using System.Diagnostics;
@using MyNextMealApp.Models.Models;
@using MyNextMealApp.Portal.Components.Page
@using MyNextMealApp.Portal.Components.Skeleton
@inject HttpClient httpClient

@*HTML*@
@if (IsLoading)
{
   <GridComponentSkeleton/>
}
else
{
    <div class="container-fluid">
        <div class="row row-cols-12" style="margin-top:2%; margin-bottom:4%;">
             <div class="col-md-12">
                 <input class="form-control" 
                        type="text" 
                        placeholder="@Search" 
                        style="text-align:center;" 
                        @bind="SearchFilter" 
                        @bind:event="oninput"/>
             </div>
        </div>

        @if (Categories.Count() == 0)
        {
            <EmptyListViewComponent MessageCategory="Categories"/>
        }

        <div class="row row-cols-12" style="margin-bottom:2%;">
            @foreach (var category in Categories.Where(i => IsItemVisible(i)))
            {
                if (counter != 0 && counter % 3 == 0)
                {
                    @:</div>
                    @:<div class="row row-cols-12" style="margin-bottom:2%;">
                }

                <div class="col-md-4">
                    <div class="thumbnail">
                        <CategoryListViewComponent Category="@category"/>
                    </div>
                </div>

                counter++;
            }
        </div>
    </div>
}

@code {
    #region Parameters, properties & fields
    private string _path = "Category/GetCategories";
    private string? Search = "Search...";
    int counter = 0;
    public bool IsLoading { get; private set; }
    public string? SearchFilter { get; private set; }
    private List<Category>? Categories;   
    #endregion

    #region Constructor
    public CategoryPage()
    {      
        try
        {
            IsLoading = false;
            SearchFilter = string.Empty;
            Categories = new List<Category>();
        }
        catch (Exception ex)
        {                   
            Debug.WriteLine($"Error in CategoryPage/Constructor => {ex.Message}");
        }    
    }
    #endregion

    #region Methods
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            IsLoading = true;
            Categories = await httpClient.GetFromJsonAsync<List<Category>>(_path);
            await Task.Delay(1000);
            IsLoading = false;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error in CategoryPage/OnParametersSetAsync => {ex.Message}");
        }     
    }

    public bool IsItemVisible(Category category)
    {
        try
        {
            if (string.IsNullOrEmpty(SearchFilter))
            {
                return true;
            }

            if (category.strCategory.Contains(SearchFilter, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            if (category.strCategory.ToString().StartsWith(SearchFilter))
            {
                return true;
            }

            return false;
        }
        catch (Exception ex)
        {                   
           Debug.WriteLine($"Error in CategoryPage/IsItemVisible => {ex.Message}");
           return false;
        }           
    }
    #endregion
}
